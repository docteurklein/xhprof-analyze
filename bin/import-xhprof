#!/usr/bin/env php
<?php

declare(strict_types=1);

set_error_handler(function($no, $str, $file, $line) {
    throw new \ErrorException($str, $no, 1, $file, $line);
});

$run_id = $argv[1];
$what = $argv[2] ?? 'wt';
$threshold = intval($argv[3] ?? 0);

$data = json_decode(file_get_contents('php://stdin'), true);
//$data = unserialize(file_get_contents('php://stdin'));

require(__DIR__.'/../vendor/autoload.php');

use GraphAware\Neo4j\Client\ClientBuilder;

$client = ClientBuilder::create()->addConnection('bolt', getenv('NEO4J_URL'))->build();

$stack = $client->stack();

foreach ($data as $relation => $stats) {
    error_log($relation);
    $call = explode('==>', $relation);
    if ($stats[$what] < $threshold) {
        error_log("ignored because $what (${stats[$what]}) < $threshold");
        continue;
    }
    if ($call[0] === 'main') {
        $call[0] = '__main__';
    }
    $stack->push('MERGE (:Function {name: {name}})', ['name' => $call[0]]);

    if (!isset($call[1])) {
        continue;
    }
    [$caller, $callee] = $call;
    $stack->push('MERGE (:Function {name: {name}})', ['name' => $callee]);

    $stats['run_id'] = $run_id;
    $stats['timestamp'] = time();

    $stack->push(<<<CYPHER
        MATCH (caller:Function {name: {caller}}),(callee:Function {name: {callee}})
        CREATE (caller)-[:CALLS {stats}]->(callee)
CYPHER
    , [
        'stats' => $stats,
        'caller' => $caller,
        'callee' => $callee,
    ]);
}

$results = $client->runStack($stack);
